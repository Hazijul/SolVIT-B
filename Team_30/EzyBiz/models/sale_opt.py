# -*- coding: utf-8 -*-
"""sale_opt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HBwsoB7GZ7_twfDP8ocjiDBB8FJ0I5nP
"""

import pandas as pd

# Load the dataset
file_path = "/content/pricing_discount_optimization.csv"
df = pd.read_csv(file_path)

# Display basic information and the first few rows
df.info(), df.head()

import matplotlib.pyplot as plt
import seaborn as sns

# Selecting only numeric columns for correlation analysis
numeric_df = df.select_dtypes(include=["number"])

# Plot the correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(numeric_df.corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Encode categorical variables
label_encoder = LabelEncoder()
df["Customer Feedback on Discounts"] = label_encoder.fit_transform(df["Customer Feedback on Discounts"])

# Define features (X) and target (y)
X = df.drop(columns=["Product ID", "Category", "Customer Feedback on Discounts"])
y = df["Customer Feedback on Discounts"]  # Target variable (discount effectiveness)

# Standardize numerical features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split dataset into training and testing sets (80-20 split)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train a RandomForest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Model evaluation
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

accuracy, conf_matrix, class_report

import matplotlib.pyplot as plt
import seaborn as sns

# Visualizing the confusion matrix
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()